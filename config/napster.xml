<?xml version='1.0' encoding='utf-8'?>
<Configuration>
	<!-- Here the variables are defined. They can be referred as "&variable-name" and overridden via -->
	<Default>
		<Variable name="seed" value="0"/>
		<Variable name="size" value="11"/>
		<Variable name="finishTime" value="3000m"/>
		<Variable name="actions" value="config/napster-actions.dat"/>
	</Default>
	
	<SimulatorCore class="de.tud.kom.p2psim.impl.simengine.Simulator" static="getInstance" seed="$seed" finishAt="$finishTime">
	</SimulatorCore>
	
	<NetLayer class="de.tud.kom.p2psim.impl.network.simple.SimpleNetFactory" downBandwidth="200" upBandwidth="100">
		<LatencyModel class="de.tud.kom.p2psim.impl.network.simple.SimpleStaticLatencyModel" latency="10"/>
	</NetLayer>
	
	<TransLayer class="de.tud.kom.p2psim.impl.transport.DefaultTransLayerFactory"/>
	
	<DHTNode class="de.tud.kom.p2psim.impl.overlay.dht.centralized.ClientServerFactory" port="400"/>
	
	<DistributionStrategy class="de.tud.kom.p2psim.impl.overlay.cd.CDFactory" port="500"/>
		
	<Napster class="de.tud.kom.p2psim.impl.application.filesharing.FileSharingFactory"/>
	
	<ContentStorage class="de.tud.kom.p2psim.impl.storage.StorageFactory"/>
	
	<User/>
	
	<Monitor class="de.tud.kom.p2psim.impl.common.DefaultMonitor" start="0" stop="100000000">
         <Analyzer class="de.tud.kom.p2psim.impl.analyzer.NetWorkloadAnalyzer"/>        
    </Monitor>
	
<!-- TODOs: DocumentDistribution -->

	<HostBuilder class="de.tud.kom.p2psim.impl.scenario.DefaultHostBuilder" experimentSize="$size">
       
       <!-- Server does not need to have an application running.-->
	   <Host groupID="server">
		   <NetLayer/>
		   <TransLayer/>
		   <DHTNode isServer="true"/>
		   <ContentStorage/>
		   <Properties enableChurn="false"/>
	   </Host>
	   
		
	   <!-- Napster Clients -->
	   <Host groupID="client1">
		   <NetLayer/>
		   <TransLayer/>
		   <DHTNode isServer="false"/>
		   <DistributionStrategy/>
		   <Napster/>
		   <ContentStorage/>
		   <Properties enableChurn="false"/>
	    </Host>
	    
	    <Host groupID="client2">
		   <NetLayer/>
		   <TransLayer/>
		   <DHTNode isServer="false"/>
		   <DistributionStrategy/>
		   <Napster/>
		   <ContentStorage/>
		   <Properties enableChurn="false"/>
	    </Host>
	   
		<Group size="3" groupID="us_clients">
		   <NetLayer/>
		   <TransLayer/>
		   <DHTNode isServer="false"/>
		   <DistributionStrategy/>
 		   <Napster/>
 		   <ContentStorage/>
 		   <Properties enableChurn="false"/>
		</Group>
	   
		<Group size="5" groupID="eu_clients">
		   <NetLayer/>
		   <TransLayer/>
		   <DHTNode isServer="false"/>
		   <DistributionStrategy/>
		   <Napster/>
		   <ContentStorage/>
		   <Properties enableChurn="false"/>
		</Group>

   </HostBuilder>

   <ChurnGenerator class="de.tud.kom.p2psim.impl.churn.DefaultChurnGenerator" start="0" stop="$finishTime">
		<ChurnModel class="de.tud.kom.p2psim.impl.churn.StaticChurnModel"/>
   </ChurnGenerator>


	<!-- SCENARIO ACTIONS: there are at least two ways to specify actions:
	here in the XML file or in external CSV file:
	Note how it works for CSV (Comma Separated Values) files:
		- you have to specify the factory which is used to create the scenario and scenario actions (here: CSVScenarioFactory).
		- "actionFile" attribute specifies in which file the actual actions are located (here via a variable, see the default section
		for declarations)
		- componentClass specifies the default component where the scenario factory will search for a method to execute for each action,
		you can also specify an interface which must be implemented by the desired component, e.g. Application, DHTNode, NetLayer etc.
		- additionalClasses allow you to mix actions for different components in one action file, note that for 
		additionalClasses you will have to provide the simple name of the class together with the method name, e.g.
		ServerNode:join or DHTNode:store
		- the nested elements ParamParser specify how to parse non-trivial method parameters from strings to desired object,
		e.g. to Documents or OverlayKeys.
	 -->
	<Scenario class="de.tud.kom.p2psim.impl.scenario.CSVScenarioFactory"
		actionsFile="$actions"
		componentClass="de.tud.kom.p2psim.api.application.Application"
		additionalClasses="de.tud.kom.p2psim.impl.overlay.dht.centralized.ServerNode;de.tud.kom.p2psim.api.overlay.DHTNode;de.tud.kom.p2psim.api.overlay.DistributionStrategy">
		<ParamParser
			class="de.tud.kom.p2psim.impl.overlay.cd.DocumentParser" />
		<ParamParser
			class="de.tud.kom.p2psim.impl.overlay.dht.centralized.OverlayKeyParser" />
	</Scenario>
	<!--	
   <Scenario class="de.tud.kom.p2psim.impl.scenario.DOMScenarioFactory">
   	  <Action groupID="1" time="10">start</Action>
   	  <Action groupID="2" time="0">join</Action>
   	  <Action groupID="1" time="20">storeDocument;first</Action>
   </Scenario>
   -->
</Configuration>