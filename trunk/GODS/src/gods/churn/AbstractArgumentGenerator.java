/**
 * Global Observatory for Distributed Systems (GODS)
 * An ecosystem for the evaluation and study
 * of large-scale distributed and dynamic systems
 * 
 * Copyright (c) 2006-2007, all rights reserved 
 * 		Royal Institute of Technology (KTH)
 * 		Swedish Institute of Computer Science (SICS)
 */

package gods.churn;

import java.io.FileNotFoundException;
import java.io.IOException;

/**
 * The <code>ArgumentGenerator</code> class provides an abstract class for
 * generating different kinds of arguments for different applications.
 * 
 * @author Ozair Kafray
 * @version $Id: org.eclipse.jdt.ui.prefs 258 2006-11-28 13:05:40Z cosmin $
 */
public abstract class AbstractArgumentGenerator implements ArgumentGenerator {

	/**
	 * Number of different instances of arguments to be generated by this
	 * generator
	 */
	protected int numberOfInstances = 1;

	private AbstractArgumentGenerator() {

	}

	/**
	 * @param parametersFileName
	 */
	public AbstractArgumentGenerator(String parametersFileName)
			throws FileNotFoundException, IOException {
		if(initialize(parametersFileName) == false) {
			;
		}	
	}

	/**
	 * Initializes the parameters required for arguments generation through the
	 * specified file. This function must be implemented by the child
	 * ArgumentGenerators. It is called automatically for all child classes in
	 * the call to this parent through their constructors
	 * 
	 * @param parametersFileName
	 *            Name of the file specifying parameters for generation of
	 *            arguments by this class
	 * @return true for successful initialization of argument generation
	 *         parameters, false otherwise.
	 * @throws FileNotFoundException
	 *             if specified file is not found
	 * @throws IOException
	 *             for an IOException by the underlying FileInputStream
	 */
	protected abstract boolean initialize(String parametersFileName)
			throws FileNotFoundException, IOException;

	final boolean reinitialize(String parametersFileName)
			throws FileNotFoundException, IOException {
		return initialize(parametersFileName);
	}

	/**
	 * Generates Arguments for the number of instances specified for this
	 * instance of ArgumentGenerator. Calling this function before
	 * {@link gods.churn.AbstractArgumentGenerator#initialize(String)} might
	 * give undesirable results.
	 * 
	 * @return An array of strings where each string represents all command
	 *         arguments to be supplied to a single application instance
	 */
	public abstract String[] generateArguments();

	/**
	 * @return the numberOfInstances
	 */
	public int getNumberOfInstances() {
		return numberOfInstances;
	}

	/**
	 * @param numberOfInstances
	 *            the numberOfInstances to set
	 */
	public void setNumberOfInstances(int numberOfInstances) {
		this.numberOfInstances = numberOfInstances;
	}
}
